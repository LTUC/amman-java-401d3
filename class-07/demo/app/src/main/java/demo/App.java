/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package demo;

import Animals.Animal;
import Animals.Cat;
import Animals.Dog;
import Animals.Pet;
import Shapes.Circle;
import Shapes.Shape;
import Shapes.Square;
import org.checkerframework.checker.units.qual.A;
import otherPackage.ChildInDifferentPackage;

public class App {

    public static void main(String[] args) {

        // Polymorphism -> the ability for a variable of a type to take different forms according to the instance it is being assigned


        // Assigning a type, an instance of that type
        Pet petTypePetInstance = new Pet();             // After running -> create a Pet object (instance), assign it to a pet variable
        // Assigning a type, an instance of child type
        Cat cat = new Cat();
        Pet petTypeCatInstance = new Cat();             // variable type is -> Pet, instance type is -> Cat
                                                        // after running -> create a Cat object (instance), assign it to a pet variable
        //petTypeCatInstance.petSpecificMethod();         // we can only access components of the type class (Pet), even if the instance is of a subtype (Cat)

        //        Pet petTypeDogInstance = new Dog();
//        // Assigning an interface type, an instance of a class that implements it
//        Animal animalTypePetInstance = new Pet();

        // I cannot call a method other than the ones exist in the type even if the method exists in the instance assigned to it
        // I can assign an instance of an object to a type of it's parent



//        Cat cat = new Cat();
//        Dog dog = new Dog();
//        Pet pet = new Pet();
//
//        cat.eat();
//        dog.eat();
//        pet.eat();


        //Circle circle = new Circle("circle 1", "white",5);
//        Square square = new Square(3,"square 1", "red");

        // I have direct access to public fields from anywhere inside the project
        //System.out.println(parentClass.publicIntInsideParent);
        // I have direct access to protected fields only if I am in the same package
        //System.out.println(parentClass.protectedIntInsideParent);
        // I have no access to private methods or fields in any other class
        //System.out.println(parentClass.privateIntInsideParent);

        // Creating an instance of the first child class
//        FirstChild firstChild = new FirstChild();
//        firstChild.printHello();

        // Creating an instance of the second child
//        AnotherChild anotherChild = new AnotherChild();
//        anotherChild.printHello();

        // Creating an instance of a child class in another package
//        ChildInDifferentPackage childInDifferentPackage = new ChildInDifferentPackage();
//        childInDifferentPackage.printHello();

//        GrandChild grandChild = new GrandChild();
//        grandChild.mehotdExistsOnlyInFirstChild();

        Pet pet = new Pet();
        Cat catt = new Cat();
        Dog dog = new Dog();

        feedaPet(pet);
        feedaPet(catt);
        feedaPet(dog);

        takeCatToSleep(pet);

    }

    /* what instances can I pass to this function
     1- a pet instance
     2- Cat instance
     3- dog instance
     */
    public static void feedaPet(Pet myPet){
        myPet.eat();
    }

    public static void takeCatToSleep(Cat myCat){
        myCat.sleep();
        myCat.catSpecificMethod();
    }
}
